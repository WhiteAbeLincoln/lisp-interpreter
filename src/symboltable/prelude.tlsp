;;; ESSENTIAL MACROS

;; sugar for defining a function
(define defun
  (macro (lambda (name params body)
    `(define ,name (lambda ,params ,body)))))

;; sugar for defining a macro
(define defmacro
  (macro (lambda (name params body)
    `(define ,name (macro (lambda ,params ,body))))))

;; use a λ for lambda
(defmacro λ args `(lambda ,@args))

;; sugar for defining a curried function
(defmacro defunC (name params body)
    `(define ,name (curry (lambda ,params ,body))))

(defmacro if (pred true false)
  `(cond (,pred ,true) (t ,false)))

;;; ESSENTIAL PREDICATES

(defun pair? (x)
  (eq? (typeof x) "pair"))
(defun number? (x)
  (eq? (typeof x) "number"))
(defun string? (x)
  (eq? (typeof x) "string"))
(defun procedure? (x)
  (eq? (typeof x) "procedure"))
(defun symbol? (x)
  (eq? (typeof x) "symbol"))
(defun empty? (x)
  (eq? (typeof x) "unit"))

;;; ESSENTIAL LISTS

(define list (lambda xs xs))
(defunC cons (a b) `(,a . ,b))
(defmacro :: params `(cons ,@params))

;; maybe not so essential - but an easy copy paste
(defun caar   (x) (car (car x)))
(defun cadr   (x) (car (cdr x)))
(defun cdar   (x) (cdr (car x)))
(defun cddr   (x) (cdr (cdr x)))
(defun caaar  (x) (car (car (car x))))
(defun caadr  (x) (car (car (cdr x))))
(defun cadar  (x) (car (cdr (car x))))
(defun caddr  (x) (car (cdr (cdr x))))
(defun cdaar  (x) (cdr (car (car x))))
(defun cdadr  (x) (cdr (car (cdr x))))
(defun cddar  (x) (cdr (cdr (car x))))
(defun cdddr  (x) (cdr (cdr (cdr x))))
(defun caaaar (x) (car (car (car (car x)))))
(defun caaadr (x) (car (car (car (cdr x)))))
(defun caadar (x) (car (car (cdr (car x)))))
(defun caaddr (x) (car (car (cdr (cdr x)))))
(defun cadaar (x) (car (cdr (car (car x)))))
(defun cadadr (x) (car (cdr (car (cdr x)))))
(defun caddar (x) (car (cdr (cdr (car x)))))
(defun cadddr (x) (car (cdr (cdr (cdr x)))))
(defun cdaaar (x) (cdr (car (car (car x)))))
(defun cdaadr (x) (cdr (car (car (cdr x)))))
(defun cdadar (x) (cdr (car (cdr (car x)))))
(defun cdaddr (x) (cdr (car (cdr (cdr x)))))
(defun cddaar (x) (cdr (cdr (car (car x)))))
(defun cddadr (x) (cdr (cdr (car (cdr x)))))
(defun cdddar (x) (cdr (cdr (cdr (car x)))))
(defun cddddr (x) (cdr (cdr (cdr (cdr x)))))

(defunC foldl (fn init xs)
  (if (empty? xs)
    init
    (foldl fn (fn (car xs) init) (cdr xs))))

(defunC foldr (fn init xs)
  (if (empty? xs)
    init
    (fn (car xs) (foldr fn init (cdr xs)))))

(defunC map (fn xs) (foldr (λ (x ys) (:: (fn x) ys)) '() xs))
(defunC filter (p xs) (foldr (λ (x ys) (if (p x) (:: x ys) ys)) '() xs))
(define reverse (rename-procedure "reverse" (foldl :: '())))
(define length (rename-procedure "length" (foldl (λ (_ a) (add 1 a)) 0)))

;;; SUGAR

(defmacro let (bindings body)
  `((lambda ,(map car bindings) ,body)
      ,@(map cadr bindings)))

(defmacro letfn (name bindings body)
  `(let ,bindings
      ((lambda (,(gensym)) (,name ,@(map car bindings)))
        (defun ,name ,(map car bindings) ,body))))

(defmacro let* (bindings body)
  (letfn loop ((lst bindings))
    (if (empty? lst)
      `,body
      `((lambda (,(caar lst))
          ,(loop (cdr lst)))
        ,(cadar lst)))))

;;; IF FRIENDS

(defun not (bool) (if (eq? bool f) t f))

(defmacro or xs
  (if (empty? xs)
    (throw "given empty condition list")
    (if (num=? 1 (length xs))
      (car xs)
      (let ((condvar (gensym)))
        `(let ((,condvar ,(car xs)))
            (if ,condvar ,condvar (or ,@(cdr xs))))))))
(defmacro and xs
  (if (empty? xs)
    (throw "given empty condition list")
    (if (num=? 1 (length xs))
      (car xs)
      (let ((condvar (gensym)))
        `(let ((,condvar ,(car xs)))
            (if ,condvar (and ,@(cdr xs)) f))))))

;;; CONTRACTS

(defunC proc-arity? (x fn)
  (cond
    ((not (procedure? fn)) (throw "expected fn to be a procedure"))
    ((number? x) (eq? x (car (procedure-arity fn))))
    ((pair? x) (equal? x (procedure-arity fn)))
    (t (throw "expected a number or pair for x"))))
(defun predicate? (a) (and (procedure? a) (proc-arity? 1 a)))
(defun primitive? (a) (or (number? a) (string? a) (symbol? a) (procedure? a) (empty? a)))
(defunC equal? (a b)
  (cond
    ((or (primitive? a) (primitive? b)) (eq? a b))
    (t (and (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))))

(defmacro define/contract (name contract-fn value)
  `(cond
    ((not ,(symbol? name)) (throw "expected name to be a symbol"))
    ((not (predicate? ,contract-fn)) (throw "expected contract to be a predicate"))
    (t
      (if
        (,contract-fn ,value)
        (define ,name ,value)
        (throw (string-append
                  ,(str name)
                  " broke contract\nexpected: "
                  ,(str contract-fn)
                  "\nrecieved: " ,(str value)))))))

(defun any/c (x) t)
(defun none/c (x) f)

(defmacro or/c contracts
  `(cond
    ((not (listof predicate? ,contracts)) (throw "expected contracts to be a list of predicates"))
    (t (lambda (a) (list-some (T a) contracts)))))

(defun and/c contracts
  (cond
    ((not (listof predicate? contracts)) (throw "expected contracts to be a list of predicates"))
    (t (lambda (a) (list-every (T a) contracts)))))

(defunC listof (c list)
  (cond
    ((not (predicate? c)) (throw "expected contract to be a predicate"))
    ((not (list? list)) f)
    (t (list-every c list))))

(defun not/c (contract)
  (cond
    ((not (predicate? contract)) (throw "expected contract to be a predicate"))
    (t (lambda (a) (not (contract a))))))

(defunC non-empty-listof (c list)
  (and (listof c list) (not (empty? list))))

(defunC cons/c (carc cdrc pair)
  (cond
    ((not (predicate? carc)) (throw "expected predicate"))
    ((not (predicate? cdrc)) (throw "expected predicate"))
    (t (and (pair? pair) (carc (car pair)) (cdrc (cdr pair))))))

;;; COMBINATORS
;; TODO: Properly implement this
(defmacro apply (f lst)
  `(cond
    ((not (procedure? ,f)) (throw "expected a procedure"))
    ((not (list? ,lst)) (throw "expected a list"))
    (t (throw "unimplemented"))))

;; identity
(defun I (x) x)
(define identity I)
;; const
(defunC K (x y) x)
(define const K)
;; apply ($)
(defunC A (f . a) (apply f a))
;; thrush
(defunC T (a fn) (fn a))
;; duplication (join)
(defunC W (f x) ((f x) x))
;; flip
(defunC C (f x y) (f y x))
(define flip C)
;; compose
(defunC B (f g x) (f (g x)))
;; substitution (ap)
(defunC S (x y z) ((x z) (y z)))
;; psi (on)
(defunC P (f g x y) ((f (g x)) (g y)))

;;; LISTS

(defun last (xs)
  (cond
    ((not (list? xs)) (throw "expected a list"))
    ((empty? xs) (throw "list is empty"))
    ;; (flip const) :: (a b) -> b
    (t (foldl (flip const) '() xs))))

(defunC nth (n xs)
  (cond
    ((not (list? xs)) (throw "expected a list"))
    ((not (natural? n)) (throw "expected a natural number"))
    (t (letfn loop ((num n) (lst xs))
        (if (num=? num 0)
          (car lst)
          (if (empty? (cdr lst))
            (throw "index out of bounds")
            (loop (sub num 1) (cdr lst))))))))

(defunC list-some (pred xs)
  (cond
    ((not (list? xs)) (throw "expected a list"))
    ((not (predicate? pred)) (throw "expected a predicate"))
    (t (letfn loop ((lst xs))
      (cond
        ((empty? lst) f)
        ((pred (car lst)) t)
        (t (loop (cdr lst))))))))

(defunC list-every (pred xs)
  (cond
    ((not (list? xs)) (throw "expected a list"))
    ((not (predicate? pred)) (throw "expected a predicate"))
    (t (letfn loop ((lst xs))
      (cond
        ((empty? lst) t)
        ((not (pred (car lst))) f)
        (t (loop (cdr lst))))))))

;;; NUMBERS

(defun + nums (foldl add 0 nums))
(defun * nums (foldl mult 1 nums))
(defun - (init . nums)
  (if (empty? nums)
    (sub 0 init)
    (foldl (flip sub) init nums)))
(defun / (init . nums)
  (if (empty? nums)
    (div 1 init)
    (foldl (flip div) init nums)))
(defun = (x1 x2 . xs)
  (list-every (num=? x1) (cons x2 xs)))

;; TODO: add a module system so this doesn't get added to the exported environment
(defun compare (fn x y lst)
  (if (empty? lst)
      (fn x y)
      (and
        (fn x y)
        (compare fn y (car lst) (cdr lst)))))

(defun < (x1 x2 . xs) (compare lt x1 x2 xs))
(defun <= (x1 x2 . xs) (compare lte x1 x2 xs))
(defun > (x1 x2 . xs) (compare gt x1 x2 xs))
(defun >= (x1 x2 . xs) (compare gte x1 x2 xs))
(define zero? (num=? 0))
(define negative? ((flip lt) 0))
(define positive? ((flip gt) 0))
(defun even? (x) (zero? (modulo x 2)))
(define odd? (not/c even?))
(defun abs (x) (if (negative? x) (- x) x))

;; vim: ft=lisp
